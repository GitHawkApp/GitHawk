#!/usr/bin/env groovy

void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/sonnguyen-logigear/GitHawk"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/run-unit-tests"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
    agent {
        node {
            label 'MacOSX'
        }
    }
    environment {
        LC_ALL = "en_US.UTF-8"
        TEST_OUTPUT = "fastlane/test_output/"
    }
    stages {
        stage('Setup project') {
            steps {
                setBuildStatus("In progress...", "PENDING")
                catchError {
                    sh "bundle"
                    sh "bundle exec pod install"
                    sh "npm install"  
                }       
            }
        }
        stage('Run unit tests') {
            steps {
                sh "rm -rf ${env.TEST_OUTPUT}"
                catchError {
                    sh "fastlane tests"
                }
                sh "mv ${env.TEST_OUTPUT}/report.junit ${env.TEST_OUTPUT}/report.xml"
            }
        }
        stage('Generate reports') {
            steps {
                script {
                    allure([
                        includeProperties: false,
                        jdk: '',
                        properties: [],
                        reportBuildPolicy: 'ALWAYS',
                        results: [[path: "${env.TEST_OUTPUT}"]]
                    ])
                }
            }
        }
    }
    post('Tear down') {
        always {        
            emailext body: '${DEFAULT_CONTENT}',
            recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
            subject: '${DEFAULT_SUBJECT}'
        }
        success {
            setBuildStatus("Build succeeded", "SUCCESS")
        }
        failure {
            setBuildStatus("Build failed", "FAILURE")
        }
    }
}
